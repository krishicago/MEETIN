# MeetIn - Intelligent Meeting Transcription and Analysis Platform

## Project Overview
MeetIn is an advanced voice-to-text application that leverages cutting-edge AI technologies to transform audio recordings into actionable insights. The project combines voice transcription, natural language processing, and intelligent question-answering capabilities.

## Key Features
- Automatic audio-to-text transcription
- GPT-3.5 Turbo-powered Q&A system
- Comprehensive meeting intelligence extraction

## Application Links
- **Airflow Dashboard:** http://ec2-52-45-138-255.compute-1.amazonaws.com:8080/
- **Streamlit Frontend:** http://ec2-52-45-138-255.compute-1.amazonaws.com/
- **FastAPI Endpoint:** http://ec2-52-45-138-255.compute-1.amazonaws.com:8000/docs
- **Project Codelabs:** https://codelabs-preview.appspot.com/?file_id=1KwFY_zq4X5mGg0K8itpnN3hzrCtn11xF6HUpXBjeMa0#0

## Prerequisites
Before setting up the project, ensure you have:
- Amazon Web Services (AWS) account
- Docker Desktop installed
- AWS access and secret keys
- OpenAI (ChatGPT) API key

## Configuration Setup

### Create .env File
Create a `.env` file in the main project directory with the following configuration:

```env
# Airflow Configuration
AIRFLOW_UID=50000
AIRFLOW_PROJ_DIR=./airflow
AIRFLOW_USERNAME=airflow
AIRFLOW_PASSWORD=airflow

# AWS Configuration
AWS_ACCESS_KEY=your_aws_access_key
AWS_SECRET_KEY=your_aws_secret_key
S3_BUCKET_NAME=damg-team-5-assignment-4

# AWS CloudWatch Logging
AWS_LOG_GROUP_NAME=damg-assignment-4
AWS_CLOUD_WATCH_NAME_QUESTION_ANSWER=question-asked-with-answer
AWS_CLOUD_WATCH_NAME_FILES_REQUESTED=files-requested-by-user
AWS_CLOUD_WATCH_NAME_FILE_UPLOADED=file-uploaded-by-user

# OpenAI Configuration
OPEN_AI_API_KEY=your_openai_api_key

# URL Configurations
FRONTEND_BASE_URL=backend
AIRFLOW_BASE_URL=airflow-webserver
```

### Important Notes
- Replace placeholder values with your actual credentials
- Keep your `.env` file secure and do not commit it to version control
- Ensure all API keys and sensitive information are kept confidential

## Getting Started
1. Clone the repository
2. Install Docker Desktop
3. Configure the `.env` file with your credentials
4. Run the application using Docker Compose

## Security Recommendations
- Use environment-specific configurations
- Rotate API keys periodically
- Implement proper access controls

## Support
For issues or questions, please open a GitHub issue or contact the project maintainers.
